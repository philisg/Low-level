#include <stdint.h>
#include <stdbool.h>


#include "efm32gg.h"


int fanfare[1000] = { 127, 127, 137, 149, 151, 150, 156, 167, 170, 170, 170, 171, 172, 172, 173, 173, 174, 174, 175, 175, 176, 176, 177, 177, 178, 178, 179, 179, 180, 180, 180, 181, 181, 182, 182, 183, 183, 183, 185, 183, 168, 156, 157, 160, 145, 122, 115, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 119, 117, 116, 131, 156, 163, 160, 160, 160, 160, 160, 160, 160, 160, 159, 157, 166, 184, 192, 190, 189, 189, 189, 188, 188, 188, 188, 188, 187, 187, 187, 187, 186, 186, 186, 187, 184, 167, 153, 153, 154, 154, 154, 154, 154, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 152, 152, 155, 146, 122, 108, 109, 111, 110, 110, 110, 110, 111, 110, 108, 122, 147, 156, 153, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 148, 152, 169, 183, 180, 162, 149, 148, 150, 149, 149, 149, 149, 149, 149, 149, 149, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 147, 147, 147, 147, 147, 147, 147, 146, 145, 155, 173, 179, 177, 178, 177, 162, 146, 144, 146, 146, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 144, 144, 144, 144, 144, 144, 144, 144, 144, 146, 142, 120, 101, 100, 102, 102, 102, 102, 102, 102, 102, 102, 103, 101, 101, 118, 142, 148, 145, 145, 145, 145, 145, 145, 145, 145, 144, 144, 144, 144, 144, 145, 144, 142, 152, 170, 177, 174, 174, 174, 174, 174, 173, 173, 173, 173, 173, 173, 172, 172, 172, 172, 172, 171, 171, 172, 173, 163, 145, 138, 140, 140, 140, 140, 139, 139, 142, 138, 116, 97, 95, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 99, 99, 99, 100, 100, 100, 100, 100, 100, 101, 100, 98, 107, 130, 153, 169, 175, 173, 173, 173, 173, 173, 172, 172, 172, 172, 172, 171, 171, 171, 171, 171, 171, 170, 170, 170, 170, 170, 170, 169, 169, 169, 169, 169, 168, 168, 170, 168, 152, 137, 136, 137, 137, 139, 134, 110, 93, 94, 95, 95, 95, 95, 95, 96, 96, 96, 96, 96, 96, 96, 96, 97, 97, 97, 97, 97, 97, 97, 98, 97, 95, 107, 132, 143, 140, 139, 140, 140, 140, 140, 140, 140, 140, 140, 140, 138, 140, 155, 170, 171, 169, 169, 169, 169, 169, 169, 169, 169, 168, 168, 168, 168, 167, 169, 167, 152, 137, 135, 137, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 135, 137, 137, 119, 96, 91, 94, 94, 94, 95, 94, 92, 103, 128, 140, 137, 136, 137, 137, 137, 137, 137, 137, 137, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 135, 136, 145, 147, 138, 134, 136, 136, 136, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 133, 140, 159, 167, 166, 165, 165, 165, 167, 159, 140, 132, 133, 134, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 132, 135, 133, 113, 91, 89, 91, 91, 91, 91, 92, 92, 92, 92, 92, 92, 93, 93, 90, 97, 121, 137, 136, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 133, 140, 159, 167, 166, 165, 165, 165, 165, 165, 164, 164, 164, 164, 164, 164, 164, 163, 163, 163, 163, 163, 163, 162, 162, 164, 161, 145, 131, 130, 132, 131, 131, 133, 131, 112, 90, 87, 90, 89, 89, 90, 90, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 92, 92, 93, 93, 93, 93, 93, 90, 98, 135, 167, 169, 165, 166, 166, 166, 166, 166, 165, 165, 165, 165, 165, 165, 164, 164, 164, 164, 164, 164, 164, 164, 163, 163, 163, 163, 163, 163, 162, 162, 163, 163, 148, 132, 129, 131, 131, 131, 130, 132, 133, 117, 93, 86, 89, 89, 89, 89, 90, 90, 90, 90, 90, 90, 90, 91, 91, 91, 91, 92, 90, 90, 107, 131, 137, 134, 134, 134, 134, 132, 138, 156, 166, 165, 164, 164, 164, 164, 164, 163, 164, 164, 150, 133, 130, 132, 132, 132, 132, 132, 132, 132, 132, 132, 135, 126, 102, 87, 89, 91, 88, 90, 111, 132, 135, 132, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 132, 130, 138, 153, 148, 133, 131, 133, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 130, 133, 150, 163, 166, 159, 141, 130, 131, 132, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 134, 128, 104, 87, 88, 90, 89, 90, 90, 87, 94, 117, 134, 134, 132, 132, 132, 132, 133, 132, 130, 136, 154, 165, 164, 162, 163, 162, 162, 162, 162, 162, 162, 161, 163, 159, 142, 129, 129, 131, 133, 124, 99, 86, 88, 89, 89, 89, 89, 89, 89, 89, 89, 90, 90, 90, 90, 91, 91, 88, 91, 122, 159, 167, 163, 163, 163, 163, 163, 163, 163, 163, 163, 162, 162, 162, 162, 162, 161, 162, 163, 154, 135, 128, 133, 129, 106, 87, 87, 89, 89, 89, 89, 89, 89, 89, 90, 90, 90, 89, 88, 103, 127, 135, 133, 132, 133, 133, 133, 131, 134, 150, 164, 164, 163, 163, 163, 163, 162, 163, 163, 151, 134, 129, 131, 131, 131, 131, 131, 131, 131, 131, 131, 130, 133, 130, 108, 89, 88, 88, 88, 106, 129, 134, 131, 131, 132, 132, 132, 132, 132, 132, 132, 131, 131, 131, 131, 131, 131, 131, 132, 133 };

int Portal [1000] = { 127, 128, 140, 140, 144, 144, 146, 146, 147, 147, 148, 148, 149, 149, 148, 148, 148, 148, 147, 147, 146, 146, 145, 145, 143, 143, 141, 141, 137, 137, 124, 124, 117, 117, 113, 113, 110, 110, 107, 107, 105, 105, 103, 103, 95, 95, 94, 94, 100, 100, 181, 181, 175, 174, 170, 170, 164, 164, 158, 158, 150, 150, 137, 137, 109, 109, 101, 101, 96, 96, 92, 92, 89, 89, 86, 86, 84, 84, 81, 81, 80, 80, 78, 78, 76, 76, 75, 75, 74, 74, 73, 73, 72, 72, 71, 71, 70, 70, 69, 69, 69, 69, 98, 98, 191, 191, 187, 187, 183, 183, 178, 178, 174, 174, 169, 169, 163, 163, 157, 157, 149, 149, 135, 135, 108, 108, 101, 101, 96, 96, 92, 92, 89, 89, 86, 86, 84, 84, 82, 82, 80, 80, 78, 78, 77, 77, 75, 75, 191, 191, 191, 191, 190, 190, 186, 186, 181, 181, 177, 177, 172, 172, 167, 167, 161, 161, 154, 154, 145, 145, 115, 115, 104, 104, 98, 98, 94, 94, 90, 90, 87, 87, 84, 84, 82, 82, 80, 80, 78, 78, 77, 77, 76, 75, 74, 74, 73, 73, 72, 72, 71, 71, 70, 70, 191, 191, 191, 191, 186, 186, 182, 182, 178, 178, 173, 173, 168, 168, 163, 163, 156, 156, 148, 148, 123, 123, 107, 107, 100, 100, 95, 95, 91, 91, 88, 88, 85, 85, 83, 83, 81, 81, 79, 79, 78, 78, 144, 144, 191, 191, 191, 191, 189, 189, 184, 184, 180, 180, 175, 175, 170, 170, 165, 165, 159, 159, 152, 152, 140, 140, 110, 110, 102, 102, 96, 96, 92, 92, 89, 89, 86, 86, 83, 83, 81, 81, 79, 79, 78, 78, 76, 76, 75, 75, 73, 73, 72, 72, 71, 71, 70, 70, 69, 69, 191, 191, 190, 190, 186, 186, 181, 181, 177, 177, 172, 172, 167, 167, 162, 162, 155, 155, 146, 146, 117, 117, 105, 105, 99, 99, 94, 94, 91, 90, 87, 87, 85, 85, 82, 82, 80, 80, 78, 78, 162, 162, 191, 191, 191, 191, 189, 189, 185, 185, 180, 180, 176, 176, 171, 171, 165, 165, 159, 159, 152, 152, 141, 141, 111, 111, 102, 102, 96, 96, 92, 92, 89, 89, 86, 86, 83, 83, 81, 81, 79, 79, 77, 77, 76, 76, 74, 74, 73, 73, 72, 72, 71, 71, 69, 69, 69, 69, 168, 168, 191, 191, 186, 186, 182, 182, 177, 178, 173, 173, 168, 168, 162, 162, 156, 156, 147, 147, 119, 119, 106, 106, 99, 99, 94, 94, 90, 90, 87, 87, 84, 84, 82, 82, 80, 80, 87, 87, 191, 191, 191, 191, 191, 191, 186, 186, 182, 182, 177, 177, 173, 173, 167, 167, 162, 162, 155, 155, 146, 146, 115, 115, 104, 104, 98, 98, 93, 93, 89, 89, 86, 86, 83, 83, 81, 81, 79, 79, 77, 77, 75, 75, 74, 74, 72, 72, 71, 71, 70, 70, 69, 69, 68, 68, 74, 74, 191, 191, 187, 187, 183, 183, 178, 178, 174, 174, 169, 169, 163, 163, 157, 157, 148, 148, 123, 123, 106, 106, 99, 99, 94, 94, 90, 90, 87, 87, 84, 84, 82, 82, 79, 79, 191, 191, 191, 191, 191, 191, 188, 188, 184, 184, 179, 179, 175, 175, 170, 170, 164, 164, 158, 158, 149, 149, 133, 133, 107, 107, 99, 99, 94, 94, 90, 90, 87, 87, 84, 84, 81, 81, 79, 79, 77, 77, 75, 75, 74, 74, 72, 72, 71, 71, 70, 70, 68, 68, 67, 67, 67, 67, 191, 191, 187, 187, 183, 183, 178, 178, 173, 173, 168, 168, 163, 163, 156, 156, 147, 147, 117, 117, 105, 105, 98, 98, 93, 93, 89, 89, 86, 86, 83, 83, 81, 81, 191, 191, 191, 191, 191, 191, 189, 189, 185, 185, 181, 181, 176, 176, 171, 171, 165, 165, 159, 159, 151, 151, 137, 137, 108, 108, 100, 100, 94, 94, 90, 90, 87, 87, 84, 84, 81, 81, 79, 79, 77, 76, 75, 75, 73, 73, 71, 71, 70, 70, 69, 69, 68, 68, 66, 66, 67, 67, 191, 191, 186, 186, 181, 181, 177, 177, 172, 172, 167, 167, 160, 160, 153, 153, 142, 142, 111, 111, 102, 101, 96, 96, 91, 91, 87, 87, 84, 84, 81, 81, 191, 191, 191, 191, 191, 191, 189, 189, 185, 185, 181, 181, 176, 176, 171, 171, 165, 165, 158, 158, 150, 150, 133, 133, 107, 107, 99, 99, 93, 93, 89, 89, 86, 86, 83, 83, 80, 80, 78, 78, 76, 76, 74, 74, 72, 72, 70, 70, 69, 69, 68, 68, 66, 66, 65, 65, 135, 135, 189, 189, 183, 183, 178, 178, 173, 173, 168, 168, 162, 162, 155, 155, 145, 145, 113, 113, 103, 103, 96, 96, 91, 91, 87, 87, 84, 84, 91, 91, 191, 191, 191, 191, 191, 191, 188, 188, 183, 183, 179, 179, 174, 174, 168, 168, 163, 163, 156, 155, 145, 145, 113, 113, 102, 102, 96, 96, 91, 91, 87, 87, 83, 83, 81, 81, 78, 78, 76, 76, 74, 74, 72, 72, 70, 70, 69, 69, 67, 67, 66, 66, 65, 65, 85, 85, 189, 189, 182, 182, 178, 178, 173, 173, 167, 167, 161, 161, 153, 153, 141, 141, 109, 109, 100, 100, 94, 94, 90, 90, 86, 86, 83, 83, 191, 191, 191, 191, 191, 191, 189, 189, 185, 185, 180, 180, 175, 175, 170, 170, 164, 164, 157, 157, 146, 146, 114, 114, 102, 102, 96, 96, 91, 91, 86, 86, 83, 83, 80, 80, 77, 77, 75, 75, 73, 73, 71, 71, 69, 69, 68, 68, 66, 66, 65, 65, 64, 64, 163, 163, 186, 186, 180, 180, 175, 175, 170, 170, 164, 164, 157, 157, 147, 147, 115, 115, 103, 103, 96, 96, 91, 91, 87, 86, 88, 88, 191, 191, 191, 191, 191, 191, 189, 189, 184, 184, 179, 179, 174, 174, 169, 169, 162, 162, 155, 155, 143, 143, 110, 110, 100, 100, 94, 94 } ;

/*
 * TODO calculate the appropriate sample period for the sound wave(s) you 
 * want to generate. The core clock (which the timer clock is derived
 * from) runs at 14 MHz by default. Also remember that the timer counter
 * registers are 16 bits. 
 */
/*
 * The period between sound samples, in clock cycles 
 */
#define   SAMPLE_PERIOD   270

/*
 * Declaration of peripheral setup functions 
 */
void setupTimer(uint32_t period);
void setupDAC();
void setupNVIC();
void setupGPIO();
void DAC_play(int data);
void tone(period,amp);
void noteGenerator(int step);
void noteGenerator_2(int step);
void playNoteAndPause(int step,int wait, int pause );
void GetButton();


/*
 * Your code will start executing here 
 */
int main(void)
{
	/*
	 * Call the peripheral setup functions 
	 */
	setupGPIO();
	setupDAC();
	setupTimer(SAMPLE_PERIOD);
	

	/*
	 * Enable interrupt handling 
	 */
	setupNVIC();

	/*
	 * TODO for higher energy efficiency, sleep while waiting for
	 * interrupts instead of infinite loop for busy-waiting 
	 */
	uint16_t i = 0;
	int increment=0;
	
	while (1)
	{
	
	//tone(270,2000);

	  /*

	  for(i = 500; i < 750; i++){
	    playNoteAndPause(i);
	  }
	  */
	  GetButton();

	  int buttons = *GPIO_PC_DIN;
 if (buttons == 0b11111110){
	    //	      if (*TIMER1_CNT == SAMPLE_PERIOD){
	    for (int i = 0; i<=100; i++){
		  GetButton();
	    
		  playNoteAndPause(Portal[i],6,1);
	    
		}}
	  if (buttons == 0b11110111){
	    //	      if (*TIMER1_CNT == SAMPLE_PERIOD){
	    for (int i = 0; i<=7; i++){
		  GetButton();
	    
		  playNoteAndPause(fanfare[i],75,100000);
	    
		}}
	  if(increment > 7 ){
	    increment = 0;
	  
	  }
	 
	  
	 
	}

	return 0;
}
void noteGenerator(int step){
  //Outdated version can be ignored
	  if(*TIMER1_CNT == SAMPLE_PERIOD)
	  {
	    for(int i = 0; i<1000;i++){
	        DAC_play(i/100);		
	    }

	    //  DAC_PLAY(0);
	    for(int i = 1000; i>0;i--){
	        DAC_play(i/100);		
	    }
	  }	
}

void noteGenerator_2(int step){
  // if(*TIMER1_CNT == SAMPLE_PERIOD){
  // Takes the step for a desired pitch experience. Changing the step will change the resulting pitch
  // The increments keeps the notes playing, building up an amplitude then building down at half the binary loudness. (i/100) and (i/200) [half the amplitude]...
	    for(int i = 0; i <step; i++){
	        DAC_play(i/100);		
	    }
	     for(int i = step ;i > 0 ; i--){
	        DAC_play(i/200);		
	        }
}

void playNoteAndPause(int step, int wait, int pause){
  // if(*TIMER1_CNT == SAMPLE_PERIOD){
  // Takes the desired step and forwards it to noteGenerator_2 while maintaining this note for the desired i = wait (based on experience).
  // Be ce careful on changing wait as this is how long it will hold the note. The pause is the pause after the note.
	  for(int i = 0; i < wait; i++) {
	    noteGenerator_2(step);
	    GetButton();
	  }

	  for(int i = 0; i < pause ; i++){
	    // DAC_play(0);
	  }
	  //  }
}


void setupNVIC()
{
	/*
	 * TODO use the NVIC ISERx registers to enable handling of
	 * interrupt(s) remember two things are necessary for interrupt
	 * handling: - the peripheral must generate an interrupt signal - the
	 * NVIC must be configured to make the CPU handle the signal You will
	 * need TIMER1, GPIO odd and GPIO even interrupt handling for this
	 * assignment. 
	 */
	 
}

void tone(int period,int amp)
{

	if(*TIMER1_CNT == SAMPLE_PERIOD)
		{
			*GPIO_PA_DOUT = (*GPIO_PC_DIN << 8);
			for(int i = 0; i < 10; i++)
			{
			DAC_play(amp);
			DAC_play(amp*2);
			}
		}
	setupTimer(period);
	if(*TIMER1_CNT == SAMPLE_PERIOD)
		{
		  GetButton();
			for(int i = 0; i < 10; i++)
			{
			DAC_play(0);
			}
		}
}
void GetButton(){
 *GPIO_PA_DOUT = (*GPIO_PC_DIN << 8);
}



void DAC_play(int data)// sends data to DAC
{	
  *DAC0_CH0DATA = data*6; //Make up for the game somewhere...
  *DAC0_CH1DATA = data*6;
}
/*void playNote(uint16_t wavelengt, uint16_t duration)
{
uint16_t elapsed;

uint16_t i;
	for(elapsed = 0; elapsed < duration; elsapsed += wavelenght)
	{
		//for loop with variable delay selects the pitch
		
		for(i = 0; i < wavelength; i++)
		{
			
		}
		*DAC0_CH0DATA ^= (1<< SPEAKER);
	}
}
/*

/*
 * if other interrupt handlers are needed, use the following names:
 * NMI_Handler HardFault_Handler MemManage_Handler BusFault_Handler
 * UsageFault_Handler Reserved7_Handler Reserved8_Handler
 * Reserved9_Handler Reserved10_Handler SVC_Handler DebugMon_Handler
 * Reserved13_Handler PendSV_Handler SysTick_Handler DMA_IRQHandler
 * GPIO_EVEN_IRQHandler TIMER0_IRQHandler USART0_RX_IRQHandler
 * USART0_TX_IRQHandler USB_IRQHandler ACMP0_IRQHandler ADC0_IRQHandler
 * DAC0_IRQHandler I2C0_IRQHandler I2C1_IRQHandler GPIO_ODD_IRQHandler
 * TIMER1_IRQHandler TIMER2_IRQHandler TIMER3_IRQHandler
 * USART1_RX_IRQHandler USART1_TX_IRQHandler LESENSE_IRQHandler
 * USART2_RX_IRQHandler USART2_TX_IRQHandler UART0_RX_IRQHandler
 * UART0_TX_IRQHandler UART1_RX_IRQHandler UART1_TX_IRQHandler
 * LEUART0_IRQHandler LEUART1_IRQHandler LETIMER0_IRQHandler
 * PCNT0_IRQHandler PCNT1_IRQHandler PCNT2_IRQHandler RTC_IRQHandler
 * BURTC_IRQHandler CMU_IRQHandler VCMP_IRQHandler LCD_IRQHandler
 * MSC_IRQHandler AES_IRQHandler EBI_IRQHandler EMU_IRQHandler 
 */
