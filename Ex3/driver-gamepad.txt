/*
 * This is a demo Linux kernel module.
 */

#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/init.h>

#include <linux/fs.h>
#include <linux/cdev.h>
#include <linux/device.h>
#include <linux/interrupt.h>
#include <linux/signal.h>
//#include <linux/sched.h>?
#include <asm/uaccess.h>
#include <asm/io.h>

#include <stdbool.h>

#include "efm32gg.h"
#define CLASS_NAME "gamepad"
#define IRQ_GPIO_EVEN 17
#define IRQ_GPIO_ODD 18

void __iomem *mem_gpio_port_c, *mem_gpio_int;

dev_t DEV_ID;
char DEV_NAME[] = "gamepad";
struct class *cl;
struct cdev my_cdev;
struct fasync_struct* async;
char buttoncache =0,*bcache_ptr;


int Setup_Gpio(void)
{	
	if(request_mem_region(GPIO_PC_BASE,0x020, DEV_NAME)==NULL){//check if we can acess the region
		return -4; //will return -5 if this space is non accessable or busy
	}
	if(request_mem_region(GPIO_INT_BASE,0x020, DEV_NAME)==NULL){//check if we can acess the region
		return -3; //will return -5 if this space is non accessable or busy
	}

	mem_gpio_port_c=ioremap_nocache(GPIO_PC_BASE, 0x020); //the physical address and the length of the adress this is the virtual adress of the c port
	if(mem_gpio_port_c == 0){
		printk(KERN_ERR "failed to remap GPIO port C\n"); //return -2 if we were not able to remap the c port 
		return -2;
	}
	mem_gpio_int = ioremap_nocache(GPIO_INT_BASE, 0x020); //need to do the same as for port C as for interrupt on the c port
	if(mem_gpio_int ==0){
	printk(KERN_ERR "failed to remap GPIO interrupt \n"); //return -1 if we were not able to remap the interrupt
		return -1;
	}
	
	iowrite32(0x33333333,mem_gpio_port_c+0x04);
	iowrite32(0xFF,mem_gpio_port_c+0x0c);
	
	iowrite32(0x22222222,mem_gpio_int+0x00); //here we select the portC for all pin change interrupts
	iowrite32(0xFF,mem_gpio_int+0x0C); // here we set the pins to generate interrupt on falling edge
	iowrite32(0xFF,mem_gpio_int+0x10); //here we enable interrupts for the gpio

	return 0;

	
}
static irq_handler_t button_handler(int irq, void *dev_id, struct pt_regs *regs){

	iowrite8(0xFF,mem_gpio_int+0x1c);
	
	if(async){
		buttoncache = ~ioread8(mem_gpio_port_c + 0x1c);
		bcache_ptr = &buttoncache;
		kill_fasync(&async,SIGIO,POLL_IN);
	
	}
	return(irq_handler_t) IRQ_HANDLED;

}
//program reads from the driver 
static ssize_t my_read(struct file *filp, char __user *buff, size_t count, loff_t *offp) {
	uint8_t keys; 
	keys = ~ioread8(mem_gpio_port_c + 0x1c); //read the current iomemory of portC
	if(bcache_ptr != NULL) { // Button read after interrupt should be buffered
		keys = buttoncache; 
		bcache_ptr = NULL;
	}

	put_user((char) keys, buff);	//sending to user space
	return 0;
}
static ssize_t my_write(struct file *filp, const char __user *buff, size_t count, loff_t *offp){
	printk(KERN_INFO " recieved data:%d \n",*buff);
	switch(buff[0]){
		case(1):
		case('1'):
			printk(KERN_INFO "6");
		case(2):
		case('2'):
			printk(KERN_INFO "5");
			break;
		case(3):
		case('3'):
			printk(KERN_INFO "4");
			break;
		case(4):
		case('4'):
			printk(KERN_INFO "3");
			break;
		case(5):
		case('5'):
			printk(KERN_INFO "2");
			break;
		case(6):
		case('6'):
			printk(KERN_INFO "1");
			break;
		case(7):
		case('7'):
			printk(KERN_INFO "0");
			break;
		default:
			printk(KERN_INFO "Invalid input - supported range: 0 to 7, got %d(char %c)",buff[0],buff[0]);
		}
		return count;
}
static int my_open(struct inode *inode, struct file *filp){
		nonseekable_open(inode, filp); //device not seekable
		
		printk(KERN_INFO " device file opened \n");
		return 0; 

}
static int my_release(struct inode *inode, struct file *filp){
	printk(KERN_INFO "Device file closed \n");
	return 0;
}

static int fasync(int inode_num,struct file *filp, int mode){
	return fasync_helper(inode_num,filp,mode, &async);
}
/*
 * template_init - function to insert this module into kernel space
 *
 * This is the first of two exported functions to handle inserting this
 * code into a running kernel
 *
 * Returns 0 if successfull, otherwise -1
 */

static struct file_operations my_fops = {
.owner  = THIS_MODULE,
//.llseek = scull_llseek,
.read   = my_read,
.write  = my_write,
//.ioctl  = scull_ioctl,
.open   = my_open,
.release= my_release,
.fasync = fasync
};

static int __init template_init(void)
{
	printk("free armour trimming, doubling money\n");
	//llocate a char device
	if(alloc_chrdev_region(&DEV_ID,0,1,DEV_NAME)<0) goto fail_alloc;
		printk(KERN_DEBUG "allocated chardev region\n");
		cdev_init(&my_cdev, &my_fops);

		cl = class_create(THIS_MODULE, CLASS_NAME);
		device_create(cl, NULL, DEV_ID, NULL, CLASS_NAME);

		//register IRQ handlers
		if(request_irq(IRQ_GPIO_ODD,(irq_handler_t) button_handler, 0, DEV_NAME,NULL) !=0) goto fail_requestIRQ1;
		if(request_irq(IRQ_GPIO_EVEN,(irq_handler_t) button_handler, 0, DEV_NAME,NULL) !=0) goto fail_requestIRQ2;
		
		switch(Setup_Gpio()){
			case -1:
			case -2:
			case -3:
			case -4:
			case -5:
				goto fail_gpio_alloc;
			default:
				printk(KERN_INFO "GPIO allocation ok+n");
		}
				
		if(cdev_add(&my_cdev,DEV_ID,1)<0) goto fail_cdev;
			printk(KERN_DEBUG " added the cdev with id %d - init complete \n", DEV_ID);
			return 0;

		//fail handling, release all allocated resources	
		fail_gpio_alloc:
			release_mem_region(GPIO_PC_BASE,0x020);
			release_mem_region(GPIO_INT_BASE,0x020);
			iounmap(mem_gpio_port_c);
			iounmap(mem_gpio_int);
			printk(KERN_ERR "Failed to request GPIO memory space \n");
			free_irq(IRQ_GPIO_EVEN,NULL);
		fail_requestIRQ2:
			free_irq(IRQ_GPIO_ODD,NULL);
		fail_requestIRQ1:
			class_destroy(cl);
		fail_cdev:
		cdev_del(&my_cdev);
		unregister_chrdev_region(DEV_ID,1);
		fail_alloc:
		printk(KERN_ERR "something failed B====D~~~:-( \n");

		return -1;
}

/*
 * template_cleanup - function to cleanup this module from kernel space
 *
 * This is the second of two exported functions to handle cleanup this
 * code from a running kernel
 */

static void __exit template_cleanup(void)
{		

	iounmap(mem_gpio_port_c);
	iounmap(mem_gpio_int);
	release_mem_region(GPIO_PA_BASE, 0x01C);
	release_mem_region(GPIO_PC_BASE, 0x020);
	release_mem_region(GPIO_INT_BASE, 0x020);
	free_irq(IRQ_GPIO_EVEN, NULL);	
	free_irq(IRQ_GPIO_ODD, NULL);	
	class_destroy(cl);
	cdev_del(&my_cdev);
	unregister_chrdev_region(DEV_ID, 1);
	printk("Short life for a small module...\n");
}

module_init(template_init);
module_exit(template_cleanup);

MODULE_DESCRIPTION("Small module, demo only, not very useful.");
MODULE_LICENSE("GPL");